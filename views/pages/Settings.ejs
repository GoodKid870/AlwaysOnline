<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/head'); %>
    <style>
        body {
            margin: 0;
            background: linear-gradient(-45deg, #003973, #E5E5BE);
            background-size: 400% 400%;
            animation: gradient 10s ease infinite;
        }

        @keyframes gradient {
            0% {
                background-position: 0 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0 50%;
            }
        }
        .jumbotron {
            background-color: rgba(255, 255, 255, 0.7);
            padding: 3rem;
            border-radius: 1rem;
            box-shadow: 0 0 1rem rgb(0 0 0 / 50%)
        }
        .navbar {
            margin: 20px 0;
            border-radius: 10px;
            background-color: rgba(255, 255, 255, 0.7);
            box-shadow: 0 0 1rem rgb(0 0 0 / 50%);
        }
        p {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            margin-top: 1rem;
            font-style: oblique;
            font-family: "Helvetica Neue", cursive;
        }
        .link {
            padding: 10px 20px;
            margin: -1px;
            background-color: #d7caa3;
            color: #fff;
            text-decoration: none;
            text-align: center;
            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            border-radius: 10px;
        }
        .link:hover{
            background-color: #b3a57c;
            color: #fff;
            text-decoration: none;
        }

        input[type="submit"] {
            padding: 10px 20px;
            margin: 11px;
            background-color: #d7caa3;
            color: #fff;
            text-decoration: none;
            text-align: center;
            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            cursor: pointer;
            border: 0;
            transition: all 0.2s ease-in-out;
        }
        input[type="submit"]:hover {
            background-color: #b3a57c;
            border: 0;
            transform: scale(1.1);
        }

        input[type="file"] {
            display: none;
        }

        .custom-file-upload {
            display: inline-block;
            padding: 10px 20px;
            cursor: pointer;
            background-color: #d7caa3;
            color: #fff;
            border-radius: 10px;
            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease-in-out;
        }

        .custom-file-upload:hover {
            background-color: #b3a57c;
            transform: scale(1.1);
        }

        #avatar-preview {
            display: block;
            margin-bottom: 1rem;
            max-width: 50%;
            height: auto;
            margin-top: 10px;
            border-radius: 10px;
            box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
        }
        .preview-container{
            display: none;
        }

    </style>
</head>
<body class="container">

<header>
    <nav class="navbar navbar-expand-lg navbar-light">
        <a class="navbar-brand" href="/">AlwaysOnline</a>
        <a class="navbar-brand" href="/news" id="news">Новости</a>
        <a class="navbar-brand" href="/messages" id="message">Сообщения</a>
        <a class="navbar-brand" href="/addfriend" id="friends">Пользователи</a>
        <a class="navbar-brand" onclick="localStorage.clear()" href="/logout">выйти</a>
        <a class="navbar-brand"  href="/profile"><%=login%></a>
        <div class="t706__product-del">
            <img class="profile-image" id="profile-image" style="width: 58.5px; height: 58.5px; object-fit: cover; border-radius: 50%" src="<%=avatar%>">
        </div>
    </nav>
</header>
<main>
    <!-- Модальное окно -->
    <div id="errorModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="modal-header">
                <h2><i class="fas fa-exclamation-triangle"></i>Error</h2>
            </div>
            <div class="modal-body">
                <p id="errorMessage"></p>
            </div>
        </div>
    </div>
    <div class="jumbotron">
        <a class="link" href="/usersetting">Расширенные</a>
        <p class="second">Хотите изменить свою аватарку?</p>
        <form action="/settings" enctype="multipart/form-data" method="POST">
            <label for="avatar-upload" class="custom-file-upload">
                Выберите файл
            </label>
            <input id="avatar-upload" type="file" name="avatar" onchange="previewFile()">
            <div class="preview-container">
                <img id="avatar-preview" src="#" alt="Avatar Preview">
            </div>
            <input type="submit" value="Загрузить">
        </form>

    </div>
</main>
<footer>
    <%- include('../partials/footer'); %>
</footer>
<script>
    // Получаем модальное окно и элементы в нем
    const modal = document.getElementById("errorModal");
    const modalText = document.getElementById("errorMessage");
    const closeBtn = document.getElementsByClassName("close")[0];

    // Функция, которая показывает модальное окно с заданным текстом
    function showErrorModal(text) {
        modalText.textContent = text;
        modal.style.display = "block";
    }

    // Закрываем модальное окно при клике на кнопку "закрыть"
    closeBtn.onclick = function() {
        modal.style.display = "none";
        location.reload()
    }

    // Закрываем модальное окно при клике на область вокруг него
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
    async function sessionUser() {
        try {
            const response = await fetch('/settings');
            console.log(response)
            if (response.status == false){
                showErrorModal(response.response);
            } else {
                showErrorModal(response.response);
            }
            if (response.ok) {
                const data = await response.json();
                if (data.code == 1) {
                    // Отобразить сообщение об ошибке и перейти на страницу логина
                    showErrorModal(data.response);
                } else {
                    // Перезагрузить страницу
                    showErrorModal(data.response);
                }
            } else {
                // Обработать ошибку HTTP
                showErrorModal(`Ошибка HTTP: ${response.status} ${response.response}`);
            }
        } catch (error) {
            // Обработать ошибку сети или парсинга JSON
            showErrorModal(`Ошибка: ${error.message}`);
        }
    }

    function previewFile() {
        const preview = document.querySelector('#avatar-preview');
        const file = document.querySelector('input[type=file]').files[0];
        const reader = new FileReader();

        reader.addEventListener("load", function () {
            preview.src = reader.result;
        }, false);

        if (file) {
            reader.readAsDataURL(file);
            // добавляем стили для отображения блока с изображением
            document.querySelector('.preview-container').style.display = 'block';
        } else {
            // скрываем блок с изображением, если файл не выбран
            document.querySelector('.preview-container').style.display = 'none';
        }
    }
</script>
</body>
<!doctype html>
</html>